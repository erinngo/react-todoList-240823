{"ast":null,"code":"import { atom, selector } from \"recoil\";\n\n// type categories = \"TO_DO\" | \"DOING\" | \"DONE\";\n//enumarable   - 값을 숫자로 반환한다는 점이 특징   , 뒤에 값을 명시하면 string으로 바꿀 수 있다.\nexport let Categories = /*#__PURE__*/function (Categories) {\n  Categories[\"TO_DO\"] = \"TO_DO\";\n  Categories[\"DOING\"] = \"DOING\";\n  Categories[\"DONE\"] = \"DONE\";\n  Categories[\"DELETE\"] = \"DELETE\";\n  return Categories;\n}({});\n// atom\nexport const categoryState = atom({\n  key: \"category\",\n  // default: \"TO_DO\",\n  default: Categories.TO_DO\n});\nexport const toDoState = atom({\n  key: \"toDo\",\n  default: []\n});\nexport const resetFormState = atom({\n  key: \"resetForm\",\n  default: false\n});\n//atom은 배열을 만들어줄 뿐이고\n//selector는 atom을 받아서 output을 변형시킨다. ----derived state\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({\n    get\n  }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    if (category === Categories.TO_DO) return toDos.filter(toDo => toDo.category === Categories.TO_DO);\n    if (category === Categories.DOING) return toDos.filter(toDo => toDo.category === Categories.DOING);\n    if (category === Categories.DONE) return toDos.filter(toDo => toDo.category === Categories.DONE);\n\n    // return [toDos.filter((toDo) => toDo.category === \"TO_DO\"), toDos.filter((toDo) => toDo.category === \"DOING\"), toDos.filter((toDo) => toDo.category === \"DONE\")];\n  }\n});","map":{"version":3,"names":["atom","selector","Categories","categoryState","key","default","TO_DO","toDoState","resetFormState","toDoSelector","get","toDos","category","filter","toDo","DOING","DONE"],"sources":["/Users/imac/Documents/HK_local/리액트_240818/src/components/atoms.tsx"],"sourcesContent":["import { atom, selector } from \"recoil\";\n\n// type categories = \"TO_DO\" | \"DOING\" | \"DONE\";\n//enumarable   - 값을 숫자로 반환한다는 점이 특징   , 뒤에 값을 명시하면 string으로 바꿀 수 있다.\nexport enum Categories {\n    \"TO_DO\" = \"TO_DO\",\n    \"DOING\" = \"DOING\",\n    \"DONE\" = \"DONE\",\n    \"DELETE\" = \"DELETE\",\n}\nexport interface IToDo {\n    text: string;\n    id: number;\n\n    //category : \"TO_DO\" | \"DOING\" | \"DONE\" | \"DELETE\";\n    category: Categories;\n}\n\n// atom\nexport const categoryState = atom<Categories>({\n    key: \"category\",\n    // default: \"TO_DO\",\n    default: Categories.TO_DO,\n});\n\nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: [],\n});\n\nexport const resetFormState = atom<boolean>({\n    key: \"resetForm\",\n    default: false,\n});\n//atom은 배열을 만들어줄 뿐이고\n//selector는 atom을 받아서 output을 변형시킨다. ----derived state\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n        const toDos = get(toDoState);\n        const category = get(categoryState);\n\n        if (category === Categories.TO_DO) return toDos.filter((toDo) => toDo.category === Categories.TO_DO);\n        if (category === Categories.DOING) return toDos.filter((toDo) => toDo.category === Categories.DOING);\n        if (category === Categories.DONE) return toDos.filter((toDo) => toDo.category === Categories.DONE);\n\n        // return [toDos.filter((toDo) => toDo.category === \"TO_DO\"), toDos.filter((toDo) => toDo.category === \"DOING\"), toDos.filter((toDo) => toDo.category === \"DONE\")];\n    },\n});\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,QAAQ;;AAEvC;AACA;AACA,WAAYC,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AActB;AACA,OAAO,MAAMC,aAAa,GAAGH,IAAI,CAAa;EAC1CI,GAAG,EAAE,UAAU;EACf;EACAC,OAAO,EAAEH,UAAU,CAACI;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGP,IAAI,CAAU;EACnCI,GAAG,EAAE,MAAM;EACXC,OAAO,EAAE;AACb,CAAC,CAAC;AAEF,OAAO,MAAMG,cAAc,GAAGR,IAAI,CAAU;EACxCI,GAAG,EAAE,WAAW;EAChBC,OAAO,EAAE;AACb,CAAC,CAAC;AACF;AACA;;AAEA,OAAO,MAAMI,YAAY,GAAGR,QAAQ,CAAC;EACjCG,GAAG,EAAE,cAAc;EACnBM,GAAG,EAAEA,CAAC;IAAEA;EAAI,CAAC,KAAK;IACd,MAAMC,KAAK,GAAGD,GAAG,CAACH,SAAS,CAAC;IAC5B,MAAMK,QAAQ,GAAGF,GAAG,CAACP,aAAa,CAAC;IAEnC,IAAIS,QAAQ,KAAKV,UAAU,CAACI,KAAK,EAAE,OAAOK,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,QAAQ,KAAKV,UAAU,CAACI,KAAK,CAAC;IACpG,IAAIM,QAAQ,KAAKV,UAAU,CAACa,KAAK,EAAE,OAAOJ,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,QAAQ,KAAKV,UAAU,CAACa,KAAK,CAAC;IACpG,IAAIH,QAAQ,KAAKV,UAAU,CAACc,IAAI,EAAE,OAAOL,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,QAAQ,KAAKV,UAAU,CAACc,IAAI,CAAC;;IAElG;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}