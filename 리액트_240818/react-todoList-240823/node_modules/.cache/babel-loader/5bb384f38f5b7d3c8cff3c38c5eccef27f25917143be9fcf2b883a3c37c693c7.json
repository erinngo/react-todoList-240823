{"ast":null,"code":"import React from\"react\";import{toDoState,Categories}from\"./atoms\";import{useSetRecoilState}from\"recoil\";import styled from\"styled-components\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Li=styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    /* margin: 20px; */\n    border-bottom: 1px solid #f1f1f1;\n    padding-bottom: 10px;\n    width: 100%;\n    box-sizing: border-box;\n    span {\n        width: 50%;\n        display: inline-block;\n        padding: 10px;\n    }\n    span:nth-of-type(2) {\n        width: 50%;\n        border: 1px solid blue;\n\n        display: flex;\n        align-items: center;\n    }\n`;const Button=styled.button`\n    font-size: 1em;\n    color: #fff;\n    border: none;\n    border-radius: 20px;\n    padding: 5px 10px;\n    margin: 5px;\n    width: 30%;\n`;function ToDo(_ref){let{text,category,id}=_ref;//toDoState에는 모든 toDo 들이 들어있다.\nconst setToDos=useSetRecoilState(toDoState);// 작동시 카테고리 변경작업 필요\nconst onClickT=event=>{//1. 현재 버튼의 카테고리 추출   - TO_DO, DOING, DONE, DELETE\nconst{currentTarget:{name}}=event;console.log(name);// 2. 현재 클릭한 버튼의 index 추출\nif(name===Categories.DELETE){setToDos(oldToDos=>{const finalToDos=oldToDos.filter(each=>each.id!==id);// 로컬 스토리지 업데이트\nlocalStorage.setItem(\"toDos\",JSON.stringify(finalToDos));return finalToDos;// 최종 ToDo 리스트 반환\n});}else{setToDos(oldToDos=>{const targetIndex=oldToDos.findIndex(each=>each.id===id);const oldToDo=oldToDos[targetIndex];// 새로운 ToDo 객체 생성  -- category 만 변경\nconst newToDo={text:oldToDo.text,id:oldToDo.id,category:name};const front=oldToDos.slice(0,targetIndex);const back=oldToDos.slice(targetIndex+1);const finalToDos=[...front,newToDo,...back];// 로컬 스토리지 업데이트\nlocalStorage.setItem(\"toDos\",JSON.stringify(finalToDos));return finalToDos;// 최종 ToDo 리스트 반환\n});}};// const resetToDos = () => {\n//     setToDos([]); // toDoState를 빈 배열로 설정\n//     localStorage.setItem(\"toDos\", JSON.stringify([])); // 로컬 스토리지도 빈 배열로 업데이트\n// };\nreturn/*#__PURE__*/_jsxs(Li,{children:[/*#__PURE__*/_jsx(\"span\",{children:text}),/*#__PURE__*/_jsxs(\"span\",{children:[category!==Categories.DOING&&/*#__PURE__*/_jsx(Button,{style:{backgroundColor:\"#f19a39\"},name:Categories.DOING+\"\",onClick:onClickT,children:\"Doing\"}),category!==Categories.TO_DO&&/*#__PURE__*/_jsx(Button,{style:{backgroundColor:\"#8d8e8d\"},name:Categories.TO_DO+\"\",onClick:onClickT,children:\"To Do\"}),category!==Categories.DONE&&/*#__PURE__*/_jsx(Button,{style:{backgroundColor:\"#67c467\"},name:Categories.DONE+\"\",onClick:onClickT,children:\"Done\"}),category!==Categories.DELETE&&/*#__PURE__*/_jsx(Button,{style:{backgroundColor:\"#c2c5c2\"},name:Categories.DELETE+\"\",onClick:onClickT,children:\"Delete\"})]})]});}export default ToDo;","map":{"version":3,"names":["React","toDoState","Categories","useSetRecoilState","styled","jsx","_jsx","jsxs","_jsxs","Li","li","Button","button","ToDo","_ref","text","category","id","setToDos","onClickT","event","currentTarget","name","console","log","DELETE","oldToDos","finalToDos","filter","each","localStorage","setItem","JSON","stringify","targetIndex","findIndex","oldToDo","newToDo","front","slice","back","children","DOING","style","backgroundColor","onClick","TO_DO","DONE"],"sources":["/Users/imac/Documents/HK_local/리액트_240818/react-todoList-240823/src/components/ToDo.tsx"],"sourcesContent":["import React from \"react\";\nimport { IToDo, toDoState, Categories } from \"./atoms\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\n\nconst Li = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    /* margin: 20px; */\n    border-bottom: 1px solid #f1f1f1;\n    padding-bottom: 10px;\n    width: 100%;\n    box-sizing: border-box;\n    span {\n        width: 50%;\n        display: inline-block;\n        padding: 10px;\n    }\n    span:nth-of-type(2) {\n        width: 50%;\n        border: 1px solid blue;\n\n        display: flex;\n        align-items: center;\n    }\n`;\nconst Button = styled.button`\n    font-size: 1em;\n    color: #fff;\n    border: none;\n    border-radius: 20px;\n    padding: 5px 10px;\n    margin: 5px;\n    width: 30%;\n`;\n\nfunction ToDo({ text, category, id }: IToDo) {\n    //toDoState에는 모든 toDo 들이 들어있다.\n    const setToDos = useSetRecoilState(toDoState);\n\n    // 작동시 카테고리 변경작업 필요\n\n    const onClickT = (event: React.MouseEvent<HTMLButtonElement>) => {\n        //1. 현재 버튼의 카테고리 추출   - TO_DO, DOING, DONE, DELETE\n        const {\n            currentTarget: { name },\n        } = event;\n\n        console.log(name);\n\n        // 2. 현재 클릭한 버튼의 index 추출\n\n        if (name === Categories.DELETE) {\n            setToDos((oldToDos) => {\n                const finalToDos = oldToDos.filter((each) => each.id !== id);\n                // 로컬 스토리지 업데이트\n                localStorage.setItem(\"toDos\", JSON.stringify(finalToDos));\n                return finalToDos; // 최종 ToDo 리스트 반환\n            });\n        } else {\n            setToDos((oldToDos) => {\n                const targetIndex = oldToDos.findIndex((each) => each.id === id);\n                const oldToDo = oldToDos[targetIndex];\n\n                // 새로운 ToDo 객체 생성  -- category 만 변경\n                const newToDo = { text: oldToDo.text, id: oldToDo.id, category: name as any };\n\n                const front = oldToDos.slice(0, targetIndex);\n                const back = oldToDos.slice(targetIndex + 1);\n                const finalToDos = [...front, newToDo, ...back];\n\n                // 로컬 스토리지 업데이트\n                localStorage.setItem(\"toDos\", JSON.stringify(finalToDos));\n                return finalToDos; // 최종 ToDo 리스트 반환\n            });\n        }\n    };\n\n    // const resetToDos = () => {\n    //     setToDos([]); // toDoState를 빈 배열로 설정\n    //     localStorage.setItem(\"toDos\", JSON.stringify([])); // 로컬 스토리지도 빈 배열로 업데이트\n    // };\n\n    return (\n        <Li>\n            <span>{text}</span>\n            <span>\n                {category !== Categories.DOING && (\n                    <Button style={{ backgroundColor: \"#f19a39\" }} name={Categories.DOING + \"\"} onClick={onClickT}>\n                        Doing\n                    </Button>\n                )}\n                {category !== Categories.TO_DO && (\n                    <Button style={{ backgroundColor: \"#8d8e8d\" }} name={Categories.TO_DO + \"\"} onClick={onClickT}>\n                        To Do\n                    </Button>\n                )}\n                {category !== Categories.DONE && (\n                    <Button style={{ backgroundColor: \"#67c467\" }} name={Categories.DONE + \"\"} onClick={onClickT}>\n                        Done\n                    </Button>\n                )}\n                {category !== Categories.DELETE && (\n                    <Button style={{ backgroundColor: \"#c2c5c2\" }} name={Categories.DELETE + \"\"} onClick={onClickT}>\n                        Delete\n                    </Button>\n                )}\n            </span>\n        </Li>\n    );\n}\n\nexport default ToDo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}