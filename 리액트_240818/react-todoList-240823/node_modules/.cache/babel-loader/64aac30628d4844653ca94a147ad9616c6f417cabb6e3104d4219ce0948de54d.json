{"ast":null,"code":"import React,{useEffect}from\"react\";import{useForm}from\"react-hook-form\";import{useSetRecoilState,useRecoilValue}from\"recoil\";import{toDoState,categoryState,Categories,resetFormState}from\"./atoms\";import styled from\"styled-components\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Button=styled.button`\n    font-size: 20px;\n    margin: 10px 0;\n    padding: 5px;\n    border: 1px solid #999;\n    border-radius: 20px;\n`;const Input=styled.input`\n    border: none;\n    background: #f1f1f1;\n    padding: 10px;\n    font-size: 20px;\n`;function CreateToDo(){const formState=useRecoilValue(resetFormState);const setToDos=useSetRecoilState(toDoState);// modi 함수\nconst myCategory=useRecoilValue(categoryState);// value\nconst{handleSubmit,register,setValue,reset}=useForm();useEffect(()=>{const savedToDos=JSON.parse(localStorage.getItem(\"toDos\")||\"[]\");setToDos(savedToDos);// 초기값 설정\n},[setToDos]);// formState가 변경될 때마다 폼 리셋\nuseEffect(()=>{if(formState){reset();// 폼 값을 초기화\n}console.log(\"reset\",formState);},[formState,reset]);const handleValid=_ref=>{let{toDo,id}=_ref;if(myCategory===Categories.DELETE){setToDos(prevToDos=>{const updatedToDos=prevToDos.filter(todo=>todo.id!==id);localStorage.setItem(\"toDos\",JSON.stringify(updatedToDos));return updatedToDos;});}else{setToDos(prevToDos=>{const newToDo={text:toDo,id:Date.now(),category:myCategory};const updatedToDos=[newToDo,...prevToDos];localStorage.setItem(\"toDos\",JSON.stringify(updatedToDos));// 상태 업데이트 후 localStorage 저장\nreturn updatedToDos;});}// set the value of a registered field\nsetValue(\"toDo\",\"\");// clear input field\n};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit(handleValid),style:{display:\"flex\",flexDirection:\"column\"},children:[/*#__PURE__*/_jsx(Input,{...register(\"toDo\",{required:\"Please write a thing to do\"}),placeholder:\"Please write a thing to do.\",autoFocus:true}),/*#__PURE__*/_jsx(Button,{children:\"Add\"})]});}export default CreateToDo;","map":{"version":3,"names":["React","useEffect","useForm","useSetRecoilState","useRecoilValue","toDoState","categoryState","Categories","resetFormState","styled","jsx","_jsx","jsxs","_jsxs","Button","button","Input","input","CreateToDo","formState","setToDos","myCategory","handleSubmit","register","setValue","reset","savedToDos","JSON","parse","localStorage","getItem","console","log","handleValid","_ref","toDo","id","DELETE","prevToDos","updatedToDos","filter","todo","setItem","stringify","newToDo","text","Date","now","category","onSubmit","style","display","flexDirection","children","required","placeholder","autoFocus"],"sources":["/Users/imac/Documents/HK_local/리액트_240818/react-todoList-240823/src/components/CreateToDo.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { toDoState, categoryState, Categories, resetFormState } from \"./atoms\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n    font-size: 20px;\n    margin: 10px 0;\n    padding: 5px;\n    border: 1px solid #999;\n    border-radius: 20px;\n`;\n\nconst Input = styled.input`\n    border: none;\n    background: #f1f1f1;\n    padding: 10px;\n    font-size: 20px;\n`;\n\ninterface IForm {\n    toDo: string;\n    id?: number;\n}\n\nfunction CreateToDo() {\n    const formState = useRecoilValue(resetFormState);\n    const setToDos = useSetRecoilState(toDoState); // modi 함수\n    const myCategory = useRecoilValue(categoryState); // value\n    const { handleSubmit, register, setValue, reset } = useForm<IForm>();\n\n    useEffect(() => {\n        const savedToDos = JSON.parse(localStorage.getItem(\"toDos\") || \"[]\");\n        setToDos(savedToDos); // 초기값 설정\n    }, [setToDos]);\n\n    // formState가 변경될 때마다 폼 리셋\n    useEffect(() => {\n        if (formState) {\n            reset(); // 폼 값을 초기화\n        }\n        console.log(\"reset\", formState);\n    }, [formState, reset]);\n\n    const handleValid = ({ toDo, id }: IForm) => {\n        if (myCategory === Categories.DELETE) {\n            setToDos((prevToDos) => {\n                const updatedToDos = prevToDos.filter((todo) => todo.id !== id);\n                localStorage.setItem(\"toDos\", JSON.stringify(updatedToDos));\n                return updatedToDos;\n            });\n        } else {\n            setToDos((prevToDos) => {\n                const newToDo = { text: toDo, id: Date.now(), category: myCategory };\n                const updatedToDos = [newToDo, ...prevToDos];\n\n                localStorage.setItem(\"toDos\", JSON.stringify(updatedToDos));\n\n                // 상태 업데이트 후 localStorage 저장\n                return updatedToDos;\n            });\n        }\n\n        // set the value of a registered field\n        setValue(\"toDo\", \"\"); // clear input field\n    };\n\n    return (\n        <form onSubmit={handleSubmit(handleValid)} style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Input\n                {...register(\"toDo\", {\n                    required: \"Please write a thing to do\",\n                })}\n                placeholder=\"Please write a thing to do.\"\n                autoFocus\n            />\n\n            <Button>Add</Button>\n        </form>\n    );\n}\n\nexport default CreateToDo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}