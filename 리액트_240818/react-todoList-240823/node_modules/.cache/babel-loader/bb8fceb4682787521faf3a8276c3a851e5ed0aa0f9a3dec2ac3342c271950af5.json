{"ast":null,"code":"import{atom,selector}from\"recoil\";// type categories = \"TO_DO\" | \"DOING\" | \"DONE\";\n//enumarable   - 값을 숫자로 반환한다는 점이 특징   , 뒤에 값을 명시하면 string으로 바꿀 수 있다.\nexport let Categories=/*#__PURE__*/function(Categories){Categories[\"TO_DO\"]=\"TO_DO\";Categories[\"DOING\"]=\"DOING\";Categories[\"DONE\"]=\"DONE\";Categories[\"DELETE\"]=\"DELETE\";return Categories;}({});// atom\nexport const categoryState=atom({key:\"category\",// default: \"TO_DO\",\ndefault:Categories.TO_DO});export const toDoState=atom({key:\"toDo\",default:[]});export const resetFormState=atom({key:\"resetForm\",default:false});//atom은 배열을 만들어줄 뿐이고\n//selector는 atom을 받아서 output을 변형시킨다. ----derived state\nexport const toDoSelector=selector({key:\"toDoSelector\",get:_ref=>{let{get}=_ref;const toDos=get(toDoState);const category=get(categoryState);if(category===Categories.TO_DO)return toDos.filter(toDo=>toDo.category===Categories.TO_DO);if(category===Categories.DOING)return toDos.filter(toDo=>toDo.category===Categories.DOING);if(category===Categories.DONE)return toDos.filter(toDo=>toDo.category===Categories.DONE);// return [toDos.filter((toDo) => toDo.category === \"TO_DO\"), toDos.filter((toDo) => toDo.category === \"DOING\"), toDos.filter((toDo) => toDo.category === \"DONE\")];\n}});","map":{"version":3,"names":["atom","selector","Categories","categoryState","key","default","TO_DO","toDoState","resetFormState","toDoSelector","get","_ref","toDos","category","filter","toDo","DOING","DONE"],"sources":["/Users/imac/Documents/HK_local/리액트_240818/react-todoList-240823/src/components/atoms.tsx"],"sourcesContent":["import { atom, selector } from \"recoil\";\n\n// type categories = \"TO_DO\" | \"DOING\" | \"DONE\";\n//enumarable   - 값을 숫자로 반환한다는 점이 특징   , 뒤에 값을 명시하면 string으로 바꿀 수 있다.\nexport enum Categories {\n    \"TO_DO\" = \"TO_DO\",\n    \"DOING\" = \"DOING\",\n    \"DONE\" = \"DONE\",\n    \"DELETE\" = \"DELETE\",\n}\nexport interface IToDo {\n    text: string;\n    id: number;\n\n    //category : \"TO_DO\" | \"DOING\" | \"DONE\" | \"DELETE\";\n    category: Categories;\n}\n\n// atom\nexport const categoryState = atom<Categories>({\n    key: \"category\",\n    // default: \"TO_DO\",\n    default: Categories.TO_DO,\n});\n\nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: [],\n});\n\nexport const resetFormState = atom<boolean>({\n    key: \"resetForm\",\n    default: false,\n});\n//atom은 배열을 만들어줄 뿐이고\n//selector는 atom을 받아서 output을 변형시킨다. ----derived state\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n        const toDos = get(toDoState);\n        const category = get(categoryState);\n\n        if (category === Categories.TO_DO) return toDos.filter((toDo) => toDo.category === Categories.TO_DO);\n        if (category === Categories.DOING) return toDos.filter((toDo) => toDo.category === Categories.DOING);\n        if (category === Categories.DONE) return toDos.filter((toDo) => toDo.category === Categories.DONE);\n\n        // return [toDos.filter((toDo) => toDo.category === \"TO_DO\"), toDos.filter((toDo) => toDo.category === \"DOING\"), toDos.filter((toDo) => toDo.category === \"DONE\")];\n    },\n});\n"],"mappings":"AAAA,OAASA,IAAI,CAAEC,QAAQ,KAAQ,QAAQ,CAEvC;AACA;AACA,UAAY,CAAAC,UAAU,uBAAVA,UAAU,EAAVA,UAAU,kBAAVA,UAAU,kBAAVA,UAAU,gBAAVA,UAAU,0BAAV,CAAAA,UAAU,OActB;AACA,MAAO,MAAM,CAAAC,aAAa,CAAGH,IAAI,CAAa,CAC1CI,GAAG,CAAE,UAAU,CACf;AACAC,OAAO,CAAEH,UAAU,CAACI,KACxB,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,SAAS,CAAGP,IAAI,CAAU,CACnCI,GAAG,CAAE,MAAM,CACXC,OAAO,CAAE,EACb,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAG,cAAc,CAAGR,IAAI,CAAU,CACxCI,GAAG,CAAE,WAAW,CAChBC,OAAO,CAAE,KACb,CAAC,CAAC,CACF;AACA;AAEA,MAAO,MAAM,CAAAI,YAAY,CAAGR,QAAQ,CAAC,CACjCG,GAAG,CAAE,cAAc,CACnBM,GAAG,CAAEC,IAAA,EAAa,IAAZ,CAAED,GAAI,CAAC,CAAAC,IAAA,CACT,KAAM,CAAAC,KAAK,CAAGF,GAAG,CAACH,SAAS,CAAC,CAC5B,KAAM,CAAAM,QAAQ,CAAGH,GAAG,CAACP,aAAa,CAAC,CAEnC,GAAIU,QAAQ,GAAKX,UAAU,CAACI,KAAK,CAAE,MAAO,CAAAM,KAAK,CAACE,MAAM,CAAEC,IAAI,EAAKA,IAAI,CAACF,QAAQ,GAAKX,UAAU,CAACI,KAAK,CAAC,CACpG,GAAIO,QAAQ,GAAKX,UAAU,CAACc,KAAK,CAAE,MAAO,CAAAJ,KAAK,CAACE,MAAM,CAAEC,IAAI,EAAKA,IAAI,CAACF,QAAQ,GAAKX,UAAU,CAACc,KAAK,CAAC,CACpG,GAAIH,QAAQ,GAAKX,UAAU,CAACe,IAAI,CAAE,MAAO,CAAAL,KAAK,CAACE,MAAM,CAAEC,IAAI,EAAKA,IAAI,CAACF,QAAQ,GAAKX,UAAU,CAACe,IAAI,CAAC,CAElG;AACJ,CACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}