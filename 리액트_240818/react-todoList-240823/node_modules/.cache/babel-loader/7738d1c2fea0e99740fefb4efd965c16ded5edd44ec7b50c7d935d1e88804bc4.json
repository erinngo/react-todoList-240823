{"ast":null,"code":"var _jsxFileName = \"/Users/imac/Documents/HK_local/\\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173_240818/src/components/CreateToDo.tsx\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { toDoState, categoryState } from \"./atoms\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = styled.button`\n    font-size: 20px;\n    margin: 10px 0;\n    padding: 5px;\n    border: 1px solid #999;\n    border-radius: 20px;\n`;\n_c = Button;\nconst Input = styled.input`\n    border: none;\n    background: #f1f1f1;\n    padding: 10px;\n    font-size: 20px;\n`;\n_c2 = Input;\nfunction CreateToDo() {\n  _s2();\n  var _s = $RefreshSig$();\n  const setToDos = useSetRecoilState(toDoState); // modi 함수\n  const myCategory = useRecoilValue(categoryState); // value\n  const {\n    handleSubmit,\n    register,\n    setValue\n  } = useForm();\n  const handleValid = ({\n    toDo\n  }) => {\n    _s();\n    // haddleValid - data  형태 : {toDo: 'df'}\n\n    //useSetRecoilState 훅을 통해 상태를 업데이트하는 함수, 상태의 구조를 자유롭게 정의할 수 있다.\n    //register에서 받아온 toDo, recoil에서 받아온 category\n    setToDos(prevToDos => [{\n      text: toDo,\n      id: Date.now(),\n      category: myCategory\n    }, ...prevToDos]);\n\n    //submit 후 localStorage\n    useEffect(() => {\n      const localTodoList = localStorage.getItem(\"todoList\");\n      if (localTodoList) {\n        setTodoList(JSON.parse(localTodoList));\n      }\n      const localId = localStorage.getItem(\"id\");\n      if (localId) {\n        setId(parseInt(localId));\n      }\n      isMount.current = false;\n    }, []);\n\n    //set the value of a registered field\n    setValue(\"toDo\", \"\"); // clear input field\n    //setValue\n  };\n  _s(handleValid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(handleValid),\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      ...register(\"toDo\", {\n        required: \"Please write a thing to do\"\n      }),\n      placeholder: \"Please write a thing to do.\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s2(CreateToDo, \"AY+YzN0XN8VIIiW+42dX1fbPl0U=\", false, function () {\n  return [useSetRecoilState, useRecoilValue, useForm];\n});\n_c3 = CreateToDo;\nexport default CreateToDo;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"CreateToDo\");","map":{"version":3,"names":["React","useEffect","useForm","useSetRecoilState","useRecoilValue","toDoState","categoryState","styled","jsxDEV","_jsxDEV","Button","button","_c","Input","input","_c2","CreateToDo","_s2","_s","$RefreshSig$","setToDos","myCategory","handleSubmit","register","setValue","handleValid","toDo","prevToDos","text","id","Date","now","category","localTodoList","localStorage","getItem","setTodoList","JSON","parse","localId","setId","parseInt","isMount","current","onSubmit","style","display","flexDirection","children","required","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/imac/Documents/HK_local/리액트_240818/src/components/CreateToDo.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { toDoState, IToDo, categoryState } from \"./atoms\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n    font-size: 20px;\n    margin: 10px 0;\n    padding: 5px;\n    border: 1px solid #999;\n    border-radius: 20px;\n`;\n\nconst Input = styled.input`\n    border: none;\n    background: #f1f1f1;\n    padding: 10px;\n    font-size: 20px;\n`;\n\ninterface IForm {\n    toDo: string;\n}\n\nfunction CreateToDo() {\n    const setToDos = useSetRecoilState(toDoState); // modi 함수\n    const myCategory = useRecoilValue(categoryState); // value\n    const { handleSubmit, register, setValue } = useForm<IForm>();\n\n    const handleValid = ({ toDo }: IForm) => {\n        // haddleValid - data  형태 : {toDo: 'df'}\n\n        //useSetRecoilState 훅을 통해 상태를 업데이트하는 함수, 상태의 구조를 자유롭게 정의할 수 있다.\n        //register에서 받아온 toDo, recoil에서 받아온 category\n        setToDos((prevToDos) => [{ text: toDo, id: Date.now(), category: myCategory }, ...prevToDos]);\n\n        //submit 후 localStorage\n        useEffect(() => {\n            const localTodoList = localStorage.getItem(\"todoList\");\n            if (localTodoList) {\n                setTodoList(JSON.parse(localTodoList));\n            }\n            const localId = localStorage.getItem(\"id\");\n            if (localId) {\n                setId(parseInt(localId));\n            }\n            isMount.current = false;\n        }, []);\n\n        //set the value of a registered field\n        setValue(\"toDo\", \"\"); // clear input field\n        //setValue\n    };\n    return (\n        <form onSubmit={handleSubmit(handleValid)} style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Input\n                {...register(\"toDo\", {\n                    required: \"Please write a thing to do\",\n                })}\n                placeholder=\"Please write a thing to do.\"\n                autoFocus\n            />\n\n            <Button>Add</Button>\n        </form>\n    );\n}\n\nexport default CreateToDo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}